company:testArtifact:1.0::example.app.App$Hexagon.<init>(D)V 	->	 __::java.lang.Object.<init>()V :invoke_special
company:testArtifact:1.0::example.app.App.<init>()V 	->	 __::java.lang.Object.<init>()V :invoke_special
company:testArtifact:1.0::example.app.App.main([Ljava/lang/String;)V 	->	 __::example.extension_a.Triangle.<init>(DD)V :invoke_special
company:testArtifact:1.0::example.app.App.main([Ljava/lang/String;)V 	->	 __::example.extension_a.Triangle.area()D :invoke_virtual
company:testArtifact:1.0::example.app.App.tryReflection(Ljava/lang/Object;)V 	->	 __::java.io.PrintStream.println(Ljava/lang/Object;)V :invoke_virtual
company:testArtifact:1.0::example.app.App.tryReflection(Ljava/lang/Object;)V 	->	 __::java.lang.Class.getMethod(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method; :invoke_virtual
company:testArtifact:1.0::example.app.App.tryReflection(Ljava/lang/Object;)V 	->	 __::java.lang.Object.getClass()Ljava/lang/Class; :invoke_virtual
company:testArtifact:1.0::example.app.App.tryReflection(Ljava/lang/Object;)V 	->	 __::java.lang.reflect.Method.invoke(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object; :invoke_virtual
company:testArtifact:1.0::example.app.Circle.<init>(D)V 	->	 __::java.lang.Object.<init>()V :invoke_special
company:testArtifact:1.0::example.app.Circle.area()D 	->	 __::java.lang.Math.pow(DD)D :invoke_static
company:testArtifact:1.0::example.app.Farm.AnimalFarm.<init>()V 	->	 __::java.lang.Object.<init>()V :invoke_special
company:testArtifact:1.0::example.app.Farm.AnimalFarm.main([Ljava/lang/String;)V 	->	 __::example.core.Farm.Animal.move(I)V :invoke_interface
company:testArtifact:1.0::example.app.Farm.AnimalFarm.main([Ljava/lang/String;)V 	->	 __::example.core.Farm.Dog.<init>()V :invoke_special
company:testArtifact:1.0::example.app.Printer.<init>()V 	->	 __::java.lang.Object.<init>()V :invoke_special
company:testArtifact:1.0::example.app.Printer.output(Lexample/core/AreaInterface;)V 	->	 __::example.core.AreaInterface.area()D :invoke_interface
company:testArtifact:1.0::example.app.Printer.output(Lexample/core/AreaInterface;)V 	->	 __::java.io.PrintStream.println(D)V :invoke_virtual
company:testArtifact:1.0::example.app.WorkerApp.<init>()V 	->	 __::java.lang.Object.<init>()V :invoke_special
company:testArtifact:1.0::example.app.WorkerApp.main([Ljava/lang/String;)V 	->	 __::example.core.Workers.AbstractWorker.getName()Ljava/lang/String; :invoke_virtual
company:testArtifact:1.0::example.app.WorkerApp.main([Ljava/lang/String;)V 	->	 __::example.core.Workers.AbstractWorker.work()I :invoke_virtual
company:testArtifact:1.0::example.app.WorkerApp.main([Ljava/lang/String;)V 	->	 __::example.core.Workers.HardWorker.<init>(Ljava/lang/String;)V :invoke_special
company:testArtifact:1.0::example.app.WorkerApp.main([Ljava/lang/String;)V 	->	 __::java.io.PrintStream.println(Ljava/lang/String;)V :invoke_virtual
company:testArtifact:1.0::example.app.WorkerApp.main([Ljava/lang/String;)V 	->	 __::java.lang.StringBuilder.<init>()V :invoke_special
company:testArtifact:1.0::example.app.WorkerApp.main([Ljava/lang/String;)V 	->	 __::java.lang.StringBuilder.append(I)Ljava/lang/StringBuilder; :invoke_virtual
company:testArtifact:1.0::example.app.WorkerApp.main([Ljava/lang/String;)V 	->	 __::java.lang.StringBuilder.append(Ljava/lang/String;)Ljava/lang/StringBuilder; :invoke_virtual
company:testArtifact:1.0::example.app.WorkerApp.main([Ljava/lang/String;)V 	->	 __::java.lang.StringBuilder.toString()Ljava/lang/String; :invoke_virtual